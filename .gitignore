# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Settings
local_settings.py

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and *not* Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port



In this updated version of the `SelectLeagues` component, we're using the `axios` library to make a `GET` request to the Sleeper API for both the user's leagues and each selected league. We're also using the `useHistory` hook to navigate back to the home page after importing the leagues.

Finally, let's update the `App` component to use the Axios versions of the `SleeperLogin` and `SelectLeagues` components:

```jsx
import React, { useState } from 'react';
import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';
import AddLeaguesButton from './AddLeaguesButton';
import SelectPlatform from './SelectPlatform';
import SleeperLogin from './SleeperLoginAxios';
import SelectLeagues from './SelectLeaguesAxios';
import SideBar from './SideBar';

function App() {
  const [importedLeagues, setImportedLeagues] = useState([]);

  const handleLeaguesImported = (leagues) => {
    setImportedLeagues(leagues);
  }

  return (
    <Router>
      <div>
        <Switch>
          <Route path="/" exact>
            <div>
              <h1>FantasyPros Multi-League Assistant</h1>
              <AddLeaguesButton />
              <SideBar leagues={importedLeagues} />
            </div>
          </Route>
          <Route path="/select-platform">
            <SelectPlatform />
          </Route>
          <Route path="/sleeper-login">
            <SleeperLogin />
          </Route>
          <Route path="/select-leagues">
            <SelectLeagues onLeaguesImported={handleLeaguesImported} />
          </Route>
        </Switch>
      </div>
    </Router>
  );
}

export default App;
